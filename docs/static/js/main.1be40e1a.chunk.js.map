{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAqB5C,OACO,0BAAMC,SAZQ,SAAEC,GACfA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAtBU,SAAEP,GAExBF,EAAgBE,EAAEQ,OAAOF,Y,uBCNpBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCDPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAOf,EAAMgB,IAAON,IACzB,2BAAKA,KCFJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA6BxC,OApBAC,qBAAW,WAGPxB,EAAQC,GACHwB,MAAO,SAAAC,GAGJH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAOtB,CAACpB,IAIGqB,EDzBwBK,GAAnBb,EAHyB,EAG9BN,KAAaa,EAHiB,EAGjBA,QAEpB,OACI,oCACI,wBAAIJ,UAAU,qCAAqChB,GAEjDoB,GAAW,uBAAGJ,UAAU,oCAAb,cAEb,yBAAKA,UAAU,aAEX,4BAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIiB,IAAMjB,EAAIC,IACLD,WElBxBkB,EAAe,WAAO,IAAD,EAEE1C,mBAAS,CAAC,cAFZ,mBAE3B2C,EAF2B,KAEf5C,EAFe,KAK9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAGA,4BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACI2B,IAAM3B,EACNA,SAAWA,U,MCfvC8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.1be40e1a.chunk.js","sourcesContent":["import React, { useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) =>{\r\n        \r\n        setInputValue ( e.target.value );\r\n        \r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n            e.preventDefault();\r\n\r\n            if(inputValue.trim().length > 2){ \r\n                setCategories(cats => [ inputValue, ...cats, ] );\r\n                setInputValue('');\r\n            }\r\n\r\n            \r\n    }\r\n\r\n    return (\r\n           <form onSubmit={handleSubmit}>\r\n                <input \r\n                    type=\"text\"\r\n                    value= {inputValue}\r\n                    onChange={  handleInputChange}\r\n                />\r\n            </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\r\n    setCategories: PropTypes.func.isRequired,\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n","\r\n\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=A8xMXqzieIHmtO3BjGLAtf1daSSDAv8K`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src= { url } alt= { title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    \r\n    const {data:images, loading} = useFetchGifs(); //renombramos data a images\r\n \r\n    return (\r\n        <>\r\n            <h2 className='animate__animated animate__fadeIn'>{category}</h2>\r\n\r\n            { loading && <p className='animate__animated animate__flash'>Loading...</p> }\r\n            \r\n            <div className=\"card-grid\">\r\n            \r\n                <ol>\r\n                    {\r\n                        images.map( img => (\r\n                            <GifGridItem \r\n                                key={ img.id }\r\n                                { ...img }\r\n                                />\r\n                        ))\r\n                    }\r\n                </ol>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n   \r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    }); // el estado inicial es un objeto con\r\n    //un arreglo vacío (data) y un loading que va\r\n    // a estar cargando por defecto\r\n\r\n    useEffect( () => { //los efectos no pueden ser async \r\n                        //pq esperan algo síncrono\r\n\r\n        getGifs(category)\r\n            .then ( imgs => {\r\n\r\n\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n                  \r\n\r\n                   \r\n            }) \r\n    \r\n    }, [category])\r\n\r\n \r\n\r\n    return state; // retornamos el objeto (lo que se encuentra\r\n                    // dentro del useState), es decir, devuelve: \r\n                    // {data:[], loading: true}\r\n}\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport PropTypes from 'prop-types';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\nconst [categories, setCategories] = useState(['One punch']);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories ={ setCategories } />\r\n            <hr />\r\n            \r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nGifExpertApp.propTypes = {\r\n\r\n    setCategories: PropTypes.func,\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}